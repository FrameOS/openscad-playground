{
  "10in3.scad": "// Waveshare 10.3\" ePaper case\n\ninclude <mark1.scad>\n\n/* [View settings] */\n\nview_mode=\"print_vertical\"; // [print_vertical, print_horizontal, stacked]\n\n/* [Panel dimensions] */\n\n// Physical width of the eInk panel (mm)\npanel_width  = 284.49;\n// Physical height of the eInk panel (mm)\npanel_height = 216.69;\n\n// Dimensions of the bezel on the eInk panel\npanel_bezel_left   = 3.1;\npanel_bezel_right  = 3.1;\npanel_bezel_top    = 3.1;\npanel_bezel_bottom = 13.7;\n\n/* [Border around and below panel] */\n\n// How much case to add around the panel\npanel_border_left   = 6;\npanel_border_right  = 6;\npanel_border_top    = 6;\npanel_border_bottom = 3;\n\n// Gap in the border for the eInk panel's cables, mm, centered\npanel_cable_gap_left = 0;\npanel_cable_gap_right = 0;\npanel_cable_gap_top = 0;\npanel_cable_gap_bottom = 141;\npanel_cable_gap_size = 2.0; // How into the border to cut\ncase_cable_gap_depth = 3.0; // How deep into the case to cut\n\n// Extra space inside the case to hold up the panel\ncase_inner_padding_left = 4;\ncase_inner_padding_right = 4;\ncase_inner_padding_top = 4;\ncase_inner_padding_bottom = 6;\n\n/* [Panel supports] */\n\ncase_center_support_vertical = true;\ncase_center_support_horizontal = true;\ncase_center_support_width = 4.0;\n\n/* [Case dimensions] */\n\n// Total inside compartment thickness (layer 2.1)\ncase_depth = 10.0; \n\n/* [Screws and placement] */\n\n// Center of each screw hole from the corner\nscrew_offset_left   = 4.0;\nscrew_offset_right  = 4.0;\nscrew_offset_top    = 4.0;\nscrew_offset_bottom = 4.0;\n\n// Extra screws on the top side (0.0 to 1.0)\nextra_screws_top = [0, 0, 0, 0, 0]; // [0.0:0.05:1.0]\n// Extra screws on the bottom side (0.0 to 1.0)\nextra_screws_bottom = [0, 0, 0, 0, 0]; // [0.0:0.05:1.0]\n// Extra screws on the left side (0.0 to 1.0)\nextra_screws_left = [0, 0, 0, 0, 0]; // [0.0:0.05:1.0]\n// Extra screws on the right side (0.0 to 1.0)\nextra_screws_right = [0.5, 0, 0, 0, 0]; // [0.0:0.05:1.0]\n\n/* [Case side holes] */\n\ncase_hole_right_top = 16;\ncase_hole_right_bottom = 16;\ncase_hole_right_top_offset = 10;\ncase_hole_right_bottom_offset = 10;\n\ncase_hole_top_depth = 2;\ncase_hole_bottom_depth = 2;\n\n/* [Kickstand (experimental)] */\n\nkickstand = false;\nkickstand_width = 40;\n",
  "13in3e.scad": "// Waveshare 13.3\"E ePaper case\n\ninclude <mark1.scad>\n\n/* [View settings] */\n\nview_mode=\"print_vertical\"; // [print_vertical, print_horizontal, stacked]\n\n/* [Panel dimensions] */\n\n// Physical width of the eInk panel (mm)\npanel_width  = 284.49;\n// Physical height of the eInk panel (mm)\npanel_height = 208.81;\n\n// Dimensions of the bezel on the eInk panel\npanel_bezel_left   = 11.7;\npanel_bezel_right  = 3.3;\npanel_bezel_top    = 3.1;\npanel_bezel_bottom = 3.1;\n\n/* [Border around and below panel] */\n\n// How much case to add around the panel\npanel_border_left   = 3.2;\npanel_border_right  = 11.6;\npanel_border_top    = 11.8;\npanel_border_bottom = 11.8;\n\n// Gap in the border for the eInk panel's cables, mm, centered\npanel_cable_gap_left = 142;\npanel_cable_gap_right = 0;\npanel_cable_gap_top = 0;\npanel_cable_gap_bottom = 0;\npanel_cable_gap_size = 2.0; // How into the border to cut\ncase_cable_gap_depth = 3.0; // How deep into the case to cut\n\n// Extra space inside the case to hold up the panel\ncase_inner_padding_left = 6;\ncase_inner_padding_right = 4;\ncase_inner_padding_top = 4;\ncase_inner_padding_bottom = 4;\n\n/* [Panel supports] */\n\ncase_center_support_vertical = true;\ncase_center_support_horizontal = true;\ncase_center_support_width = 4.0;\n\n/* [Case dimensions] */\n\n// Total inside compartment thickness (layer 2.1)\ncase_depth = 10.0; \n\n/* [Screws and placement] */\n\n// Center of each screw hole from the corner\nscrew_offset_left   = 5.0;\nscrew_offset_right  = 5.0;\nscrew_offset_top    = 5.0;\nscrew_offset_bottom = 5.0;\n\n// Extra screws on the top side (0.0 to 1.0)\nextra_screws_top = [0.48, 0.52, 0, 0, 0]; // [0.0:0.05:1.0]\n// Extra screws on the bottom side (0.0 to 1.0)\nextra_screws_bottom = [0.48, 0.52, 0, 0, 0]; // [0.0:0.05:1.0]\n// Extra screws on the left side (0.0 to 1.0)\nextra_screws_left = [0, 0, 0, 0, 0]; // [0.0:0.05:1.0]\n// Extra screws on the right side (0.0 to 1.0)\nextra_screws_right = [0.5, 0, 0, 0, 0]; // [0.0:0.05:1.0]\n\n/* [Case side holes] */\n\ncase_hole_right_top = 16;\ncase_hole_right_bottom = 16;\ncase_hole_right_top_offset = 10;\ncase_hole_right_bottom_offset = 10;\n\ncase_hole_top_depth = 2;\ncase_hole_bottom_depth = 2;\n\n/* [Kickstand (experimental)] */\n\nkickstand = false;\nkickstand_width = 40;\n",
  "7in3e.scad": "// Waveshare 7.3\"E ePaper case\n\ninclude <mark1.scad>\n\n/* [View settings] */\n\nview_mode=\"print_horizontal\"; // [print_vertical, print_horizontal, stacked]\n\n/* [Panel dimensions] */\n\n// Physical width of the eInk panel (mm)\npanel_width  = 170.3;\n// Physical height of the eInk panel (mm)\npanel_height = 111.3;\n\n// Dimensions of the bezel on the eInk panel\npanel_bezel_left   = 5.2;\npanel_bezel_right  = 5.2;\npanel_bezel_top    = 4.9;\npanel_bezel_bottom = 10.8;\n\n/* [Border around and below panel] */\n\n// How much case to add around the panel\npanel_border_left   = 2.0;\npanel_border_right  = 2.0;\npanel_border_top    = 6.0;\npanel_border_bottom = 6.0;\n\n// Gap in the border for the eInk panel's cables, mm, centered\npanel_cable_gap_left = 0;\npanel_cable_gap_right = 0;\npanel_cable_gap_top = 0;\npanel_cable_gap_bottom = 40;\npanel_cable_gap_size = 2.0; // How into the border to cut\ncase_cable_gap_depth = 3.0; // How deep into the case to cut\n\n// Extra space inside the case to hold up the panel\ncase_inner_padding_left = 2.0;\ncase_inner_padding_right = 2.0;\ncase_inner_padding_top = 2.0;\ncase_inner_padding_bottom = 2.0;\n\n/* [Panel supports] */\n\ncase_center_support_vertical = false;\ncase_center_support_horizontal = false;\n\n/* [Case dimensions] */\n\n// Total inside compartment thickness (layer 2.1)\ncase_depth = 12.0; \n\n/* [Screws and placement] */\n\n// Center of each screw hole from the corner\nscrew_offset_left   = 3.2;\nscrew_offset_right  = 3.2;\nscrew_offset_top    = 3.2;\nscrew_offset_bottom = 3.2;\n\n// Extra screws on the top side (0.0 to 1.0)\nextra_screws_top = [0, 0, 0, 0, 0]; // [0.0:0.05:1.0]\n// Extra screws on the bottom side (0.0 to 1.0)\nextra_screws_bottom = [0, 0, 0, 0, 0]; // [0.0:0.05:1.0]\n// Extra screws on the left side (0.0 to 1.0)\nextra_screws_left = [0, 0, 0, 0, 0]; // [0.0:0.05:1.0]\n// Extra screws on the right side (0.0 to 1.0)\nextra_screws_right = [0, 0, 0, 0, 0]; // [0.0:0.05:1.0]\n\n/* [Case side holes] */\n\ncase_hole_left_bottom = 16;\ncase_hole_left_bottom_offset = 5;\n\ncase_hole_top_depth = 2;\ncase_hole_bottom_depth = 2;\n\n/* [Kickstand (experimental)] */\n\nkickstand = true;\nkickstand_width = 40;\nkickstand_depth = 7;\n",
  "7in5.scad": "// Waveshare 7.5\" ePaper case\n\ninclude <mark1.scad>\n\n/* [View settings] */\n\nview_mode=\"print_horizontal\"; // [print_vertical, print_horizontal, stacked]\n\n/* [Panel dimensions] */\n\n// Physical width of the eInk panel (mm)\npanel_width  = 170.3;\n// Physical height of the eInk panel (mm)\npanel_height = 111.3;\n\n// Dimensions of the bezel on the eInk panel\npanel_bezel_left   = 3.2;\npanel_bezel_right  = 3.2;\npanel_bezel_top    = 3.0;\npanel_bezel_bottom = 8.9;\n\n/* [Border around and below panel] */\n\n// How much case to add around the panel\npanel_border_left   = 2.0;\npanel_border_right  = 2.0;\npanel_border_top    = 6.0;\npanel_border_bottom = 6.0;\n\n// Gap in the border for the eInk panel's cables, mm, centered\npanel_cable_gap_left = 0;\npanel_cable_gap_right = 0;\npanel_cable_gap_top = 0;\npanel_cable_gap_bottom = 40;\npanel_cable_gap_size = 2.0; // How into the border to cut\ncase_cable_gap_depth = 3.0; // How deep into the case to cut\n\n// Extra space inside the case to hold up the panel\ncase_inner_padding_left = 2.0;\ncase_inner_padding_right = 2.0;\ncase_inner_padding_top = 2.0;\ncase_inner_padding_bottom = 2.0;\n\n/* [Panel supports] */\n\ncase_center_support_vertical = false;\ncase_center_support_horizontal = false;\n\n/* [Case dimensions] */\n\n// Total inside compartment thickness (layer 2.1)\ncase_depth = 7.0; \n\n/* [Screws and placement] */\n\n// Center of each screw hole from the corner\nscrew_offset_left   = 3.2;\nscrew_offset_right  = 3.2;\nscrew_offset_top    = 3.2;\nscrew_offset_bottom = 3.2;\n\n// Extra screws on the top side (0.0 to 1.0)\nextra_screws_top = [0, 0, 0, 0, 0]; // [0.0:0.05:1.0]\n// Extra screws on the bottom side (0.0 to 1.0)\nextra_screws_bottom = [0, 0, 0, 0, 0]; // [0.0:0.05:1.0]\n// Extra screws on the left side (0.0 to 1.0)\nextra_screws_left = [0, 0, 0, 0, 0]; // [0.0:0.05:1.0]\n// Extra screws on the right side (0.0 to 1.0)\nextra_screws_right = [0, 0, 0, 0, 0]; // [0.0:0.05:1.0]\n\n/* [Case side holes] */\n\ncase_hole_left_bottom = 16;\ncase_hole_left_bottom_offset = 5;\n\ncase_hole_top_depth = 2;\ncase_hole_bottom_depth = 2;\n\n/* [Kickstand (experimental)] */\n\nkickstand = true;\nkickstand_width = 40;\nkickstand_depth = 7;\n",
  "mark1.scad": "/* FrameOS Case: Mark I */\n\n/* [View settings] */\n\nview_mode=\"print_vertical\"; // [print_vertical, print_horizontal, stacked]\n\n/* [Panel dimensions] */\n\n// Physical width of the eInk panel (mm) @shared\npanel_width  = 284.49;\n// Physical height of the eInk panel (mm) @shared\npanel_height = 208.81;\n\n// Thickness of the eInk panel (layer 1.2: border)\npanel_depth  = 1.2;\n// Clearance around the eInk panel (mm)\nclearance = 0.3;\n\n// Dimensions of the bezel on the eInk panel @shared\npanel_bezel_left   = 11.7;\npanel_bezel_right  = 3.3;\npanel_bezel_top    = 3.1;\npanel_bezel_bottom = 3.1;\n\n/* [Border around and below panel] */\n\n// How much case to add around the panel @shared\npanel_border_left   = 3.2;\npanel_border_right  = 11.6;\npanel_border_top    = 11.8;\npanel_border_bottom = 11.8;\n\n// Gap in the border for the eInk panel's cables, mm, centered @shared\npanel_cable_gap_left = 142;\npanel_cable_gap_right = 0;\npanel_cable_gap_top = 0;\npanel_cable_gap_bottom = 0;\npanel_cable_gap_size = 2.0; // How into the border to cut\ncase_cable_gap_depth = 3.0; // How deep into the case to cut\n\n// Extra space inside the case to hold up the panel @shared\ncase_inner_padding_left = 6;\ncase_inner_padding_right = 4;\ncase_inner_padding_top = 4;\ncase_inner_padding_bottom = 4;\n\n/* [Panel supports] */\n\n// @shared\n\ncase_center_support_vertical = true;\ncase_center_support_horizontal = true;\ncase_center_support_width = 4.0;\n\n/* [Case dimensions] */\n\nfillet_radius = 2;\n\n// Panel cover thickness (together with panel_depth makes up the top part)\npanel_cover_depth = 2.0;\n\n// Total inside compartment thickness (layer 2.1) @shared\ncase_depth = 10.0; \n\n// Back shell thickness (layer 2.2)\nback_depth = 2.0;\n\n/* [Screws and placement] */\n\n// Center of each screw hole from the corner @shared\nscrew_offset_left   = 5.0;\nscrew_offset_right  = 5.0;\nscrew_offset_top    = 5.0;\nscrew_offset_bottom = 5.0;\n\n// Extra screws on the top side (0.0 to 1.0) @shared\nextra_screws_top = [0.48, 0.52, 0, 0, 0]; // [0.0:0.05:1.0]\n// Extra screws on the bottom side (0.0 to 1.0) @shared\nextra_screws_bottom = [0.48, 0.52, 0, 0, 0]; // [0.0:0.05:1.0]\n// Extra screws on the left side (0.0 to 1.0) @shared\nextra_screws_left = [0, 0, 0, 0, 0]; // [0.0:0.05:1.0]\n// Extra screws on the right side (0.0 to 1.0) @shared\nextra_screws_right = [0.5, 0, 0, 0, 0]; // [0.0:0.05:1.0]\n\n// Hole made into layer 1.2\npanel_screw_insert_diameter = 3.45;\npanel_screw_insert_depth = 2.0;\n\n// Cylindrical hole inserted into layers 2.1 and 2.2\ncase_screw_hole_diameter        = 4.5;\ncase_screw_hole_thread_diameter = 2.0; // Hole for the screw thread that goes all the way through\ncase_screw_hole_floor_depth     = 1.0; // Depth of the floor of the screw hole\ncase_screw_hole_insert_depth    = 4.0; // Leave this much room at bottom for the heat set insert\n\n/* [Case side holes] */\n\n// @shared, set to zero and 2\n\ncase_hole_left_top = 0;\ncase_hole_left_bottom = 0;\ncase_hole_right_top = 0;\ncase_hole_right_bottom = 0;\ncase_hole_top_left = 0;\ncase_hole_top_right = 0;\ncase_hole_bottom_left = 0;\ncase_hole_bottom_right = 0;\n\ncase_hole_left_top_offset = 0;\ncase_hole_left_bottom_offset = 0;\ncase_hole_right_top_offset = 0;\ncase_hole_right_bottom_offset = 0;\ncase_hole_top_left_offset = 0;\ncase_hole_top_right_offset = 0;\ncase_hole_bottom_left_offset = 0;\ncase_hole_bottom_right_offset = 0;\n\ncase_hole_top_depth = 2;\ncase_hole_bottom_depth = 2;\n\n/* [Kickstand (experimental)] */\n\nkickstand = true; // @shared\nkickstand_width = 40;\nkickstand_leg_width = 10; // @shared\nkickstand_height_percentage = 65; // @shared\nkickstand_leg_bridge_offset_percentage = 15;\nkickstand_leg_bridge_height = 10;\nkickstand_depth = 7; // @shared\nkickstand_bottom_start = 3;\nkickstand_wall_thickness = 1;\nkickstand_gap_thickness = 0.5;\nkickstand_hinge_diameter = 2.2; // @shared\nkickstand_leg_hole_diameter = 5; // @shared\nhinge_top_extra_leverage = 1; // @shared overrides kickstand_gap_thickness on the top @shared\nhinge_wall_padding = 0.2; // distance from the back wall\nhinge_cylinder_gap = 0.5; // gap between the hinge and the cylinder\n\n/* [Debug] */\n\n// Gap between STL parts for visual debugging\ndebug_gap = 40;\n\n$fn = 32;\n\n\n/*****************************************************************************/\n/*                Derived Dimensions (overall frame size)                    */\n/*****************************************************************************/\n\n// Physical width of the eInk panel (mm) + clearance 0.3*2\npanel_width_with_clearance  = panel_width  + clearance * 2;\n// Physical height of the eInk panel (mm) + clearance 0.3*2\npanel_height_with_clearance = panel_height + clearance * 2;\n\n// Width and height of the entire frame\nframe_full_width  = panel_width_with_clearance\n                  + panel_border_left + panel_border_right;\n\nframe_full_height = panel_height_with_clearance\n                  + panel_border_top + panel_border_bottom;\n\n// Total depth across all 4 layers\nframe_full_depth = panel_depth\n                 + panel_cover_depth\n                 + case_depth\n                 + back_depth;\n\nkickstand_height = frame_full_height * kickstand_height_percentage / 100;\nkickstand_full_width = kickstand_width + 2 * kickstand_wall_thickness + 2 * kickstand_gap_thickness;\nkickstand_leg_full_width = kickstand_leg_width + 2 * kickstand_wall_thickness + 2 * kickstand_gap_thickness;\nkickstand_leg_bridge_offset = kickstand_leg_bridge_offset_percentage * (kickstand_height - 2 * kickstand_leg_bridge_height) / 100;\n\n/*****************************************************************************/\n/*                 Utility: Corner Screw Hole Positions                      */\n/*****************************************************************************/\n\n// Coordinates for the four corners, offset in from each edge\nscrew_positions = [\n    [ screw_offset_left,                     screw_offset_bottom                  ],\n    [ frame_full_width - screw_offset_right, screw_offset_bottom                  ],\n    [ screw_offset_left,                     frame_full_height - screw_offset_top ],\n    [ frame_full_width - screw_offset_right, frame_full_height - screw_offset_top ],\n\n    for (s = extra_screws_bottom)\n        if (s != 0 && s != 1)\n            [ screw_offset_left + s * (frame_full_width - screw_offset_left - screw_offset_right), \n            frame_full_height - screw_offset_top ],\n\n    for (s = extra_screws_top)\n        if (s != 0 && s != 1)\n            [ screw_offset_left + s * (frame_full_width - screw_offset_left - screw_offset_right), \n            screw_offset_bottom ],\n\n    for (s = extra_screws_left)\n        if (s != 0 && s != 1)\n            [ screw_offset_left, \n            screw_offset_bottom + s * (frame_full_height - screw_offset_bottom - screw_offset_top) ],\n\n    for (s = extra_screws_right)\n        if (s != 0 && s != 1)\n            [ frame_full_width - screw_offset_right, \n            screw_offset_bottom + s * (frame_full_height - screw_offset_bottom - screw_offset_top) ]\n];\n\n\n/*****************************************************************************/\n/*                            Panel cover                                    */\n/*****************************************************************************/\n\nmodule panel_cover() {\n    difference() {\n        // Top block\n        filletBoxTop(frame_full_width, frame_full_height, panel_cover_depth + panel_depth);\n        \n        // Window for the eInk panel’s visible area\n        translate(\n          [\n            panel_bezel_left + panel_border_left, \n            panel_bezel_top  + panel_border_top,\n            -0.11\n          ]\n        )\n        cube([\n            panel_width_with_clearance  - panel_bezel_left - panel_bezel_right, \n            panel_height_with_clearance - panel_bezel_top  - panel_bezel_bottom, \n            panel_cover_depth + 0.22\n        ]);\n\n        for (c = screw_positions) {\n            translate([c[0], c[1],  panel_cover_depth + panel_depth - panel_screw_insert_depth])\n                cylinder(d = panel_screw_insert_diameter, \n                         h = panel_screw_insert_depth + 0.11);\n        }\n\n        // Internal rectangular cutout matching the panel\n        translate(\n          [\n            panel_border_left,\n            panel_border_top,\n            panel_cover_depth\n          ]\n        )\n        cube([\n            panel_width_with_clearance,\n            panel_height_with_clearance,\n            panel_depth + 0.22\n        ]);\n        if (panel_cable_gap_bottom > 0) {\n            render_panel_cable_gap_bottom(panel_depth, panel_cover_depth);\n        }\n        if (panel_cable_gap_top > 0) {\n            render_panel_cable_gap_top(panel_depth, panel_cover_depth);\n        }\n        if (panel_cable_gap_left > 0) {\n            render_panel_cable_gap_left(panel_depth, panel_cover_depth);\n        }\n        if (panel_cable_gap_right > 0) {\n            render_panel_cable_gap_right(panel_depth, panel_cover_depth);\n        }\n    }\n}\n\nmodule render_panel_cable_gap_bottom(depth, translate_depth) {\n  translate(\n    [\n      panel_border_left + panel_width_with_clearance / 2 - panel_cable_gap_bottom / 2,\n      panel_border_top + panel_height_with_clearance - case_inner_padding_bottom - case_depth - 0.11,\n      translate_depth\n    ]\n  )\n  cube([\n      panel_cable_gap_bottom,\n      panel_cable_gap_size + case_inner_padding_bottom + 0.11 + case_depth,\n      depth + 0.11\n  ]); \n}\n\nmodule render_panel_cable_gap_top(depth, translate_depth) {\n  translate(\n    [\n      panel_border_left + panel_width_with_clearance / 2 - panel_cable_gap_top / 2,\n      panel_border_top - panel_cable_gap_size,\n      translate_depth\n    ]\n  )\n  cube([\n      panel_cable_gap_top,\n      panel_cable_gap_size * 2 + case_inner_padding_top + 0.11, // 2x to cut into the chamfer\n      depth + 0.11\n  ]); \n  if (view_mode == \"print_vertical\") {\n    let (l = panel_cable_gap_top, w = depth, h = depth)\n    translate([\n    panel_border_left + panel_width_with_clearance / 2 - panel_cable_gap_top / 2,\n    panel_border_top - panel_cable_gap_size - depth + 0.11,\n    translate_depth\n    ])\n    polyhedron(//pt 0        1        2        3        4        5\n        points=[[0,0,0], [l,0,0], [l,w,0], [0,w,0], [0,w,h], [l,w,h]],\n        faces=[[0,1,2,3],[5,4,3,2],[0,4,5,1],[0,3,4],[5,2,1]]\n    );\n  }\n}\n\nmodule render_panel_cable_gap_left(depth, translate_depth) {\n  translate(\n    [\n      panel_border_left - panel_cable_gap_size,\n      panel_border_top + panel_height_with_clearance / 2 - panel_cable_gap_left / 2,\n      translate_depth\n    ]\n  )\n  cube([\n      panel_cable_gap_size + case_inner_padding_left + 0.11,\n      panel_cable_gap_left,\n      depth + 0.11\n  ]); \n  if (view_mode == \"print_vertical\") {\n    let (l = panel_cable_gap_size + case_inner_padding_left + 0.11, w = depth, h = depth)\n    translate([\n      panel_border_left - panel_cable_gap_size,\n      panel_border_top + panel_height_with_clearance / 2 - panel_cable_gap_left / 2 - depth + 0.11,\n      translate_depth\n    ])\n    polyhedron(//pt 0        1        2        3        4        5\n        points=[[0,0,0], [l,0,0], [l,w,0], [0,w,0], [0,w,h], [l,w,h]],\n        faces=[[0,1,2,3],[5,4,3,2],[0,4,5,1],[0,3,4],[5,2,1]]\n    );\n  }\n}\n\nmodule render_panel_cable_gap_right(depth, translate_depth) {\n  translate(\n    [\n      panel_border_left + panel_width_with_clearance - case_inner_padding_right - 0.11,\n      panel_border_top + panel_height_with_clearance / 2 - panel_cable_gap_right / 2,\n      translate_depth\n    ]\n  )\n  cube([\n      panel_cable_gap_size + case_inner_padding_right + 0.11,\n      panel_cable_gap_right,\n      depth + 0.11\n  ]); \n  if (view_mode == \"print_vertical\") {\n    let (l = panel_cable_gap_size + case_inner_padding_right + 0.11, w = depth, h = depth)\n    translate([\n      panel_border_left + panel_width_with_clearance - case_inner_padding_right - 0.11,\n      panel_border_top + panel_height_with_clearance / 2 - panel_cable_gap_right / 2 - depth + 0.11,\n      translate_depth\n    ])\n    polyhedron(//pt 0        1        2        3        4        5\n        points=[[0,0,0], [l,0,0], [l,w,0], [0,w,0], [0,w,h], [l,w,h]],\n        faces=[[0,1,2,3],[5,4,3,2],[0,4,5,1],[0,3,4],[5,2,1]]\n    );\n  }\n}\n\n\n/*****************************************************************************/\n/*                             Case body                                     */\n/*****************************************************************************/\n\nmodule caseBody () {\n    difference() {\n        filletBoxBottom(\n            frame_full_width, \n            frame_full_height, \n            case_depth + back_depth\n        );\n        \n        // Internal rectangular cutout for electronics\n        translate(\n          [\n            panel_border_left + case_inner_padding_left,\n            panel_border_top  + case_inner_padding_top,\n            -0.11\n          ]\n        )\n        cube([\n            panel_width_with_clearance \n              - case_inner_padding_left \n              - case_inner_padding_right,\n            panel_height_with_clearance \n              - case_inner_padding_top \n              - case_inner_padding_bottom,\n            case_depth + 0.11\n        ]);\n        case_cable_gaps();\n        case_holes();\n    }\n     // chamfer the edges\n    if (view_mode == \"print_vertical\") {\n        difference() {\n            // top chamfer\n            let (\n                l = panel_width_with_clearance - case_inner_padding_left - case_inner_padding_right, \n                w = -case_depth, \n                h = -case_depth\n            )\n            translate([\n                panel_border_left + case_inner_padding_left,\n                panel_border_top  + case_inner_padding_top + case_depth,\n                case_depth\n            ])\n            polyhedron(//pt 0        1        2        3        4        5\n                points=[[0,0,0], [l,0,0], [l,w,0], [0,w,0], [0,w,h], [l,w,h]],\n                faces=[[0,1,2,3],[5,4,3,2],[0,4,5,1],[0,3,4],[5,2,1]]\n            );\n            if (panel_cable_gap_top > 0) {\n                render_panel_cable_gap_top(case_cable_gap_depth, -0.11);\n            }\n        }\n    }\n}\n\nmodule case_cable_gaps() {\n    if (panel_cable_gap_bottom > 0) {\n        render_panel_cable_gap_bottom(case_cable_gap_depth, -0.11);\n    }\n    if (panel_cable_gap_top > 0) {\n        render_panel_cable_gap_top(case_cable_gap_depth, -0.11);\n    }\n    if (panel_cable_gap_left > 0) {\n        render_panel_cable_gap_left(case_cable_gap_depth, -0.11);\n    }\n    if (panel_cable_gap_right > 0) {\n        render_panel_cable_gap_right(case_cable_gap_depth, -0.11);\n    }\n}\n\nmodule case_holes() {\n    if (case_hole_left_top > 0) {\n        translate([-0.11, case_hole_left_top_offset + panel_border_top + case_inner_padding_top - 0.11, -0.11 + case_hole_top_depth])\n        cube([\n            panel_border_left + case_inner_padding_left + 0.22,\n            case_hole_left_top + 0.22,\n            case_depth - case_hole_top_depth - case_hole_bottom_depth + 0.22\n        ]);\n    }\n    if (case_hole_left_bottom > 0) {\n        translate([-0.11, - case_hole_left_bottom_offset + panel_border_top + panel_height_with_clearance - case_inner_padding_bottom - case_hole_left_bottom - 0.11, -0.11 + case_hole_top_depth])\n        cube([\n            panel_border_left + case_inner_padding_left + 0.22,\n            case_hole_left_bottom + 0.22,\n            case_depth - case_hole_top_depth - case_hole_bottom_depth + 0.22\n        ]);\n    }\n    if (case_hole_right_top > 0) {\n        translate([panel_width_with_clearance + panel_border_left - case_inner_padding_right - 0.11, case_hole_right_top_offset + panel_border_top + case_inner_padding_top - 0.11, -0.11 + case_hole_top_depth])\n        cube([\n            panel_border_right + case_inner_padding_right + 0.22,\n            case_hole_right_top + 0.22,\n            case_depth - case_hole_top_depth - case_hole_bottom_depth + 0.22\n        ]);\n    }\n    if (case_hole_right_bottom > 0) {\n        translate([panel_width_with_clearance + panel_border_left - case_inner_padding_right - 0.11, - case_hole_right_bottom_offset + panel_border_top + panel_height_with_clearance - case_inner_padding_bottom - case_hole_right_bottom - 0.11, -0.11 + case_hole_top_depth])\n        cube([\n            panel_border_right + case_inner_padding_right + 0.22,\n            case_hole_right_bottom + 0.22,\n            case_depth - case_hole_top_depth - case_hole_bottom_depth + 0.22\n        ]);\n    }\n    if (case_hole_top_left > 0) {\n        translate([case_hole_top_left_offset + panel_border_left + case_inner_padding_left - 0.11, -0.11, -0.11 + case_hole_top_depth])\n        cube([\n            case_hole_top_left + 0.22,\n            panel_border_top + case_inner_padding_top + 0.22,\n            case_depth - case_hole_top_depth - case_hole_bottom_depth + 0.22\n        ]);\n    }\n    if (case_hole_top_right > 0) {\n        translate([- case_hole_top_right_offset + panel_border_left + panel_width_with_clearance - case_inner_padding_right - case_hole_top_right - 0.11, -0.11, -0.11 + case_hole_top_depth])\n        cube([\n            case_hole_top_right + 0.22,\n            panel_border_top + case_inner_padding_top + 0.22,\n            case_depth - case_hole_top_depth - case_hole_bottom_depth + 0.22\n        ]);\n    }\n    if (case_hole_bottom_left > 0) {\n        translate([case_hole_bottom_left_offset + panel_border_left + case_inner_padding_left - 0.11, panel_border_top + panel_height_with_clearance - case_inner_padding_bottom - 0.11, -0.11 + case_hole_top_depth])\n        cube([\n            case_hole_bottom_left + 0.22,\n            panel_border_top + case_inner_padding_top + 0.22,\n            case_depth - case_hole_top_depth - case_hole_bottom_depth + 0.22\n        ]);\n    }\n    if (case_hole_bottom_right > 0) {\n        translate([-case_hole_bottom_right_offset + panel_border_left + panel_width_with_clearance - case_inner_padding_right - case_hole_bottom_right - 0.11, panel_border_top + panel_height_with_clearance - case_inner_padding_bottom - 0.11, -0.11 + case_hole_top_depth])\n        cube([\n            case_hole_bottom_right + 0.22,\n            panel_border_top + case_inner_padding_top + 0.22,\n            case_depth - case_hole_top_depth - case_hole_bottom_depth + 0.22\n        ]);\n    }   \n}\n\nmodule case() {\n    // Cut out inner cylinders for screws\n    difference() {\n        union() {\n            if (case_center_support_vertical || case_center_support_horizontal) {\n                difference() {\n                    union() {\n                        // Center support\n                        if (case_center_support_horizontal) {\n                            translate([frame_full_width / 4, frame_full_height / 2 - (case_center_support_width / 2), 0])\n                            cube([frame_full_width / 6, case_center_support_width, case_depth]);\n\n                            translate([frame_full_width / 4 + frame_full_width / 3, frame_full_height / 2 - (case_center_support_width / 2), 0])\n                            cube([frame_full_width / 6, case_center_support_width, case_depth]);\n\n                            if (view_mode == \"print_vertical\") {\n                                let (l = frame_full_width / 6, w = -case_depth, h = -case_depth)\n                                translate([frame_full_width / 4, frame_full_height / 2 + (case_center_support_width / 2) + case_depth, case_depth])\n                                polyhedron(//pt 0        1        2        3        4        5\n                                    points=[[0,0,0], [l,0,0], [l,w,0], [0,w,0], [0,w,h], [l,w,h]],\n                                    faces=[[0,1,2,3],[5,4,3,2],[0,4,5,1],[0,3,4],[5,2,1]]\n                                );\n                                let (l = frame_full_width / 6, w = -case_depth, h = -case_depth)\n                                translate([frame_full_width / 4 + frame_full_width / 3, frame_full_height / 2 + (case_center_support_width / 2) + case_depth, case_depth])\n                                polyhedron(//pt 0        1        2        3        4        5\n                                    points=[[0,0,0], [l,0,0], [l,w,0], [0,w,0], [0,w,h], [l,w,h]],\n                                    faces=[[0,1,2,3],[5,4,3,2],[0,4,5,1],[0,3,4],[5,2,1]]\n                                );\n                            }\n                        }\n\n                        if (case_center_support_vertical) {\n                            translate([frame_full_width / 2 - (case_center_support_width / 2), frame_full_height / 4, 0])\n                            cube([case_center_support_width, frame_full_height / 6, case_depth]);\n\n                            translate([frame_full_width / 2 - (case_center_support_width / 2), frame_full_height / 4 + frame_full_height / 3, 0])\n                            cube([case_center_support_width, frame_full_height / 6, case_depth]);\n\n                            if (view_mode == \"print_vertical\") {\n                                let (l = case_center_support_width, w = -case_depth, h = -case_depth)\n                                translate([\n                                    frame_full_width / 2 - (case_center_support_width / 2), \n                                    frame_full_height / 4 + frame_full_height / 6 + case_depth,\n                                    case_depth\n                                ])\n                                polyhedron(//pt 0        1        2        3        4        5\n                                    points=[[0,0,0], [l,0,0], [l,w,0], [0,w,0], [0,w,h], [l,w,h]],\n                                    faces=[[0,1,2,3],[5,4,3,2],[0,4,5,1],[0,3,4],[5,2,1]]\n                                );\n\n                                let (l = case_center_support_width, w = -case_depth, h = -case_depth)\n                                translate([\n                                    frame_full_width / 2 - (case_center_support_width / 2), \n                                    frame_full_height / 4 + frame_full_height / 2 + case_depth,\n                                    case_depth\n                                ])\n                                polyhedron(//pt 0        1        2        3        4        5\n                                    points=[[0,0,0], [l,0,0], [l,w,0], [0,w,0], [0,w,h], [l,w,h]],\n                                    faces=[[0,1,2,3],[5,4,3,2],[0,4,5,1],[0,3,4],[5,2,1]]\n                                );\n                            }\n                        }\n                    };\n                }\n            };\n\n            // Cut out a piece of the cube\n            caseBody();\n        };\n        \n        // Cut holes to the back\n        for (c = screw_positions) {\n            // Screw thread hole that goes all the way\n            translate([c[0], c[1], - 0.11])\n            cylinder(d = case_screw_hole_thread_diameter,\n                      h = case_depth + back_depth + 0.11);\n            \n            // Cylinder hole from back to insert\n            translate([c[0], c[1], case_screw_hole_insert_depth + case_screw_hole_floor_depth]) // Solid border around the screw hole\n            cylinder(d = case_screw_hole_diameter,\n                      h = case_depth + back_depth - case_screw_hole_insert_depth - case_screw_hole_floor_depth + 0.11); // Hole for the screw thread\n            \n            // Cylinder hole from front to insert\n            translate([c[0], c[1], - 0.11]) // Solid border around the screw hole\n            cylinder(d = case_screw_hole_diameter,\n                      h = case_screw_hole_insert_depth + 0.11); // Hole for the screw thread\n        }\n    }\n}\n\n/*****************************************************************************/\n/*                             Kickstand                                     */\n/*****************************************************************************/\n\nmodule renderKickstand() {\n    cube([kickstand_full_width, kickstand_height, kickstand_depth]);\n}\n\nmodule caseWithKickstand() {\n    hinge_real_depth = kickstand_depth - kickstand_wall_thickness - hinge_wall_padding - kickstand_hinge_diameter / 2;\n    hinge_start = [\n        frame_full_width / 2 - kickstand_full_width / 2 + 0.11, \n        frame_full_height - kickstand_bottom_start - kickstand_height + kickstand_wall_thickness + kickstand_depth / 2 + hinge_top_extra_leverage,  // no kickstand_gap_thickness here, \n        case_depth + back_depth - hinge_real_depth / 2\n    ];\n    leg_x_starts_full = [\n        (frame_full_width - kickstand_full_width) / 2,\n        (frame_full_width + kickstand_full_width) / 2 - kickstand_leg_full_width,\n    ];\n    leg_x_starts_hole = [\n        leg_x_starts_full[0] + kickstand_wall_thickness,\n        leg_x_starts_full[1] + kickstand_wall_thickness,\n    ];\n    leg_x_starts_leg = [\n        leg_x_starts_hole[0] + kickstand_gap_thickness,\n        leg_x_starts_hole[1] + kickstand_gap_thickness,\n    ];\n    leg_bridge_leg_y = frame_full_height - kickstand_bottom_start - kickstand_leg_bridge_offset - kickstand_leg_bridge_height * 2;\n    leg_bridge_hole_y = leg_bridge_leg_y - kickstand_gap_thickness;\n    leg_bridge_full_y = leg_bridge_leg_y - kickstand_wall_thickness;\n    leg_top_height_full = kickstand_depth + hinge_top_extra_leverage + kickstand_wall_thickness * 2 + kickstand_gap_thickness;\n\n    // Make a hole in the case\n    difference() {\n        union() {\n            case();\n            // Protective box around the kickstand legs\n            for (x = leg_x_starts_full) {\n                // Top thicker part\n                translate([\n                    x, \n                    frame_full_height - kickstand_bottom_start - kickstand_height, \n                    case_depth + back_depth - kickstand_depth\n                ])\n                cube([kickstand_leg_full_width, leg_top_height_full, kickstand_depth]);\n                // Long base leg\n                translate([\n                    x, \n                    frame_full_height - kickstand_bottom_start - kickstand_height, \n                    case_depth + back_depth - kickstand_depth / 2 - kickstand_gap_thickness\n                ])\n                cube([kickstand_leg_full_width, kickstand_height, kickstand_depth / 2 + kickstand_gap_thickness]);\n            }\n            // Protective box around the leg bridge\n            translate([\n                leg_x_starts_full[0] + kickstand_leg_full_width - kickstand_wall_thickness * 2, \n                leg_bridge_full_y, \n                case_depth + back_depth - kickstand_depth\n            ])\n            cube([\n                kickstand_full_width - kickstand_leg_full_width * 2 + kickstand_wall_thickness * 4, \n                kickstand_leg_bridge_height * 2 + kickstand_gap_thickness * 2 + kickstand_wall_thickness * 2, \n                kickstand_depth\n            ]);\n        }\n        // Now the holes\n        for (x = leg_x_starts_hole) {\n            // Top thicker part\n            translate([\n                x,\n                frame_full_height - kickstand_bottom_start - kickstand_height + kickstand_wall_thickness,\n                case_depth + back_depth - kickstand_depth + kickstand_wall_thickness + 0.11\n            ])\n            cube([\n                kickstand_leg_width + 2 * kickstand_gap_thickness,\n                leg_top_height_full - 2 * kickstand_wall_thickness,\n                kickstand_depth - kickstand_wall_thickness\n            ]);\n\n            // Long base leg\n            translate([\n                x,\n                frame_full_height - kickstand_bottom_start - kickstand_height + kickstand_wall_thickness,\n                case_depth + back_depth - kickstand_depth / 2 - kickstand_gap_thickness + kickstand_wall_thickness\n            ])\n            cube([\n                kickstand_leg_width + 2 * kickstand_gap_thickness,\n                kickstand_height - 2 * kickstand_wall_thickness,\n                kickstand_depth / 2 - kickstand_wall_thickness + kickstand_gap_thickness + 0.11\n            ]);\n        }\n\n        // Leg bridge\n        translate([\n            leg_x_starts_full[0] + kickstand_leg_full_width - kickstand_wall_thickness - 0.11, \n            leg_bridge_hole_y, \n            case_depth + back_depth - kickstand_depth + kickstand_wall_thickness - 0.11\n        ])\n        cube([\n            kickstand_full_width - kickstand_leg_full_width * 2 + kickstand_wall_thickness * 2 + 0.22, \n            kickstand_leg_bridge_height * 2 + kickstand_gap_thickness * 2, \n            kickstand_depth - kickstand_wall_thickness + 0.22\n        ]);\n    }\n    \n    // The kickstand itself\n    difference() {\n        union() {\n            // Legs\n            for (x = leg_x_starts_leg) {\n                // Render the leg's top cylinder over the hinge\n                translate([x, hinge_start[1], hinge_start[2]])\n                rotate([90, 0, 90])\n                cylinder(d = hinge_real_depth, h = kickstand_leg_width);\n\n                // Render the large leg\n                translate([\n                    x, \n                    frame_full_height - kickstand_bottom_start - kickstand_height + kickstand_gap_thickness + kickstand_wall_thickness,  // no kickstand_gap_thickness here, \n                    case_depth + back_depth - hinge_real_depth / 2\n                ])\n                cube([\n                    kickstand_leg_width, \n                    kickstand_height - kickstand_gap_thickness - kickstand_wall_thickness * 2 - kickstand_gap_thickness,\n                    hinge_real_depth / 2\n                ]);\n            }\n            // Render the leg bridge\n            translate([\n                leg_x_starts_leg[0] + kickstand_leg_width, \n                leg_bridge_leg_y,\n                case_depth + back_depth - hinge_real_depth / 2\n            ])\n            cube([\n                kickstand_width - 2 * kickstand_leg_width, \n                kickstand_leg_bridge_height, \n                hinge_real_depth / 2\n            ]);\n        }\n\n        // Render an empty cylinder inside the top cylinder, where the hinge will go through\n        translate([leg_x_starts_leg[0] - 0.11, hinge_start[1], hinge_start[2]])\n        rotate([90, 0, 90])\n        cylinder(d = kickstand_hinge_diameter + hinge_cylinder_gap * 2, h = kickstand_width + 0.22);\n\n        // Render an empty cylinder into the feet of the kickstand\n        for (x = leg_x_starts_leg) {\n            translate([\n                x - 0.11, \n                frame_full_height - kickstand_bottom_start - kickstand_gap_thickness * 3,\n                case_depth + back_depth - hinge_real_depth / 4\n            ])\n            rotate([90, 0, 90])\n            cylinder(d = hinge_real_depth / 3, h = kickstand_leg_width + 0.22);\n        }\n    }\n\n    // Render an full cylinder into the base of the frame\n    for (x = leg_x_starts_hole) {\n        translate([\n            x - 0.11, \n            frame_full_height - kickstand_bottom_start - kickstand_gap_thickness * 2,\n            case_depth + back_depth - hinge_real_depth / 4\n        ])\n        rotate([90, 0, 90])\n        cylinder(d = hinge_real_depth / 3, h = kickstand_leg_width + 0.22 + kickstand_gap_thickness * 2);\n    }\n\n    for (x = leg_x_starts_full) {\n        // Render a cylinder as a hinge\n        translate([x, hinge_start[1], hinge_start[2]])\n        rotate([90, 0, 90])\n        cylinder(d = kickstand_hinge_diameter, h = kickstand_leg_full_width - 0.22);\n    }\n}\n\n/*****************************************************************************/\n/*                              Utility                                      */\n/*****************************************************************************/\n\n\nmodule filletBox(x, y, z, r = fillet_radius) {\n    // Optional sanity check (warn if the fillet is too large):\n    if (x < 2*r || y < 2*r || z < 2*r) {\n        echo(\"WARNING: fillet radius is too large for box dimensions!\");\n    }\n    \n    // Minkowski sum of a smaller cube + sphere(r)\n    // => yields a final shape with filleted edges/corners.\n    translate([r, r, r])  // Move the sphere to the corner of the cube\n    minkowski() {\n        // Create the “inner” cube, shrunk by 2*r in each dimension\n        // so that after Minkowski we end up with full x, y, z overall.\n        cube([x - 2*r, y - 2*r, z - 2*r], center = false);\n\n        // Add the sphere that “rounds” the corners/edges\n        sphere(r = r, $fn = 64);  // $fn=64 for smoother arcs\n    }\n}\n\nmodule filletBoxTop(x, y, z, r = fillet_radius) {\n    intersection() {\n        cube([x, y, z]);\n        filletBox(x, y, z * 2, r);\n    }\n}\n\nmodule filletBoxMiddle(x, y, z, r = fillet_radius) {\n    intersection() {\n        cube([x, y, z]);\n        translate([0, 0, -z])\n        filletBox(x, y, z * 3, r);\n    }\n}\n\nmodule filletBoxBottom(x, y, z, r = fillet_radius) {\n    intersection() {\n        cube([x, y, z]);\n        translate([0, 0, -z])\n        filletBox(x, y, z * 2, r);\n    }\n}\n\n\n\n/*****************************************************************************/\n/*                              Rendering                                    */\n/*****************************************************************************/\n\nprint_gap = 20;\n\nrotate(\n    view_mode == \"print_vertical\" \n    ? [180, 180, 180]\n    : view_mode == \"print_horizontal\" \n    ? [0, 0, 180]\n    : [0, 180, 0])\ntranslate(\n    view_mode == \"print_vertical\" \n      ? [-frame_full_width/2, -frame_full_height - print_gap - debug_gap, 0]\n      : view_mode == \"print_horizontal\" \n        ? [-frame_full_width/2, +frame_full_height/2 + print_gap, -(case_depth + back_depth)] \n        : [-frame_full_width/2, -frame_full_height/2, - (panel_cover_depth + panel_depth + debug_gap)])  // stacked\npanel_cover();\n\nrotate(\n    view_mode == \"print_vertical\" \n    ? [90, 180, 180] \n    : [0, 180, 0]\n)\ntranslate(\n    view_mode == \"print_vertical\" \n    ? [-frame_full_width/2, -frame_full_height, 0] \n    : [-frame_full_width/2, -frame_full_height/2, 0]\n) \n    if (kickstand) {\n        difference() {\n            caseWithKickstand();\n            // cut off half\n            // translate([-0.1, -0.1, -0.1])\n            // cube([frame_full_width * 0, frame_full_height, 30]);\n        }\n    } else {\n        case();\n    };\n",
  "welcome.scad": "// Welcome to The FrameOS Case Maker!\n\n// To get started, choose your panel from the dropdown above.\n// Change the values of a panel to customize it to your liking.\n// When you're done, generate a STL by clicking \"render\" below.\n\n// To share your customizations with everyone else, visit:\n// - https://github.com/FrameOS/cases/\n// - https://frameos.net/\n\n// If you're new to OpenSCAD, get started here:\n// - https://openscad.org/documentation.html\n// - https://openscad.org/cheatsheet/index.html\n// - https://learnxinyminutes.com/openscad/\n\n// This is a fork of the OpenSCAD playground. Big props to them!\n// - https://github.com/openscad/openscad-playground\n\n// Edit \"13in3e.scad\" directly for more options\ninclude <13in3e.scad>\n\n// Physical width of the eInk panel (mm)\npanel_width  = 284.49;\n// Physical height of the eInk panel (mm)\npanel_height = 208.81;\n// Total inside compartment thickness (layer 2.1)\ncase_depth = 10.0; \n// Add a kickstand\nkickstand = false;\n// Vertical spacers holding up the frame\ncase_center_support_vertical = true;\n// Horizontal spacers holding up the frame\ncase_center_support_horizontal = true;\n\n"
}