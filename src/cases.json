{
  "case1.scad": "/* FrameOS Case 1 */\n\n/* [View settings] */\n\nview_mode=\"print_vertical\"; // [print_vertical, print_horizontal, stacked]\n\n// Shrinkage adjustment when printing vertically. By default 0.4mm of shrinkage for every 100mm of print height.\nvertical_print_scale = 1.004;\n\n/* [Panel dimensions] */\n\n// Physical width of the eInk panel (mm)\npanel_width  = 284.49;\n// Physical height of the eInk panel (mm)\npanel_height = 208.81;\n\n// Clearance around the eInk panel (mm)\nclearance = 0.3;\n\n// Dimensions of the bezel on the eInk panel. This part will be covered by the panel cover.\npanel_bezel_left   = 11.7;\npanel_bezel_right  = 3.3;\npanel_bezel_top    = 3.1;\npanel_bezel_bottom = 3.1;\n\n/* [Border and inner padding] */\n\n// How much border to add around the panel\npanel_border_left   = 3.2;\npanel_border_right  = 11.6;\npanel_border_top    = 11.8;\npanel_border_bottom = 11.8;\n\n// Supporting space below the panel\ncase_inner_padding_left = 4;\ncase_inner_padding_right = 4;\ncase_inner_padding_top = 4;\ncase_inner_padding_bottom = 4;\n\n/* [Case dimensions] */\n\n// How round to make the case\nfillet_radius = 2.5;\n\n// Panel cover thickness\npanel_cover_depth = 1.6;\n\n// Thickness of the eInk panel as measured\npanel_depth  = 1.2;\n\n// Total inside compartment thickness\ncase_depth = 10.0;\n\n// Back plate thickness \nback_depth = 1.2;\n\n/* [Cable holes for panel] */\n\n// Gap in the border for the eInk panel's cables, mm, centered\npanel_cable_gap_left = 0;\npanel_cable_gap_right = 0;\npanel_cable_gap_top = 0;\npanel_cable_gap_bottom = 0;\npanel_cable_gap_size = 2.0; // How into the border to cut\ncase_cable_gap_depth = 3.0; // How deep into the case to cut\n\n/* [Panel supports] */\n\ncase_center_support_vertical = true;\ncase_center_support_horizontal = true;\ncase_center_support_width = 4.0;\n\n/* [Screws and placement] */\n\n// Center of each screw hole from the corner\nscrew_offset_left   = 5.0;\nscrew_offset_right  = 5.0;\nscrew_offset_top    = 5.0;\nscrew_offset_bottom = 5.0;\n\n// Extra screws on the top side (0.0 to 1.0)\nextra_screws_top = [0.48, 0.52, 0, 0, 0]; // [0.0:0.05:1.0]\n// Extra screws on the bottom side (0.0 to 1.0)\nextra_screws_bottom = [0.48, 0.52, 0, 0, 0]; // [0.0:0.05:1.0]\n// Extra screws on the left side (0.0 to 1.0)\nextra_screws_left = [0, 0, 0, 0, 0]; // [0.0:0.05:1.0]\n// Extra screws on the right side (0.0 to 1.0)\nextra_screws_right = [0.5, 0, 0, 0, 0]; // [0.0:0.05:1.0]\n\n// Hole made into layer 1.2\npanel_screw_insert_diameter = 3.45;\npanel_screw_insert_depth = 2.0;\n\n// Cylindrical hole inserted into layers 2.1 and 2.2\ncase_screw_hole_diameter        = 4.5;\ncase_screw_hole_thread_diameter = 2.0; // Hole for the screw thread that goes all the way through\ncase_screw_hole_floor_depth     = 1.0; // Depth of the floor of the screw hole\ncase_screw_hole_insert_depth    = 4.0; // Leave this much room at bottom for the heat set insert\n\n/* [Case side holes] */\n\ncase_hole_left_top = 0;\ncase_hole_left_bottom = 0;\ncase_hole_right_top = 0;\ncase_hole_right_bottom = 0;\ncase_hole_top_left = 0;\ncase_hole_top_right = 0;\ncase_hole_bottom_left = 0;\ncase_hole_bottom_right = 0;\n\ncase_hole_left_top_offset = 0;\ncase_hole_left_bottom_offset = 0;\ncase_hole_right_top_offset = 0;\ncase_hole_right_bottom_offset = 0;\ncase_hole_top_left_offset = 0;\ncase_hole_top_right_offset = 0;\ncase_hole_bottom_left_offset = 0;\ncase_hole_bottom_right_offset = 0;\n\ncase_hole_top_depth = 1;\ncase_hole_bottom_depth = 1;\n\n/* [Kickstand] */\n\nkickstand = true;\nkickstand_width = 90;\nkickstand_leg_width = 10;\nkickstand_height_percentage = 65;\nkickstand_leg_bridge_offset_percentage = 15;\nkickstand_leg_bridge_height = 10;\nkickstand_depth = 7;\nkickstand_bottom_start = 3;\nkickstand_wall_thickness = 1;\nkickstand_gap_thickness = 0.5;\nkickstand_hinge_diameter = 2.2;\nkickstand_leg_hole_diameter = 5;\nkickstand_hinge_top_extra_leverage = 3; // Height added to the flap above the hinge. Increasing reduces max rotation\nkickstand_hinge_wall_padding = 0.2; // Distance from the back wall\nkickstand_hinge_cylinder_gap = 0.5; // Gap between the hinge and the cylinder\nkickstand_rotation = 0; // Kickstand rotation angle, goes up to 35 when open\n\n/* [USB cutout] */\n\nusb_cutout = true;\nusb_cutout_offset_x_percentage = 80;\nusb_cutout_offset_y_percentage = 20;\nusb_cutout_box_width = 20;\nusb_cutout_box_height = 50;\nusb_cutout_box_depth = 7;\nusb_cutout_box_wall_thickness = 0.8;\nusb_cutout_hole_postition = \"top\"; // [top, bottom]\nusb_cutout_hole_width = 14;\nusb_cutout_hole_height = 6.0;\n\n/* [Hanging hole] */\n\nhanging_hole = true;\nhanging_hole_large_diameter = 8;\nhanging_hole_small_diameter = 3;\nhanging_hole_offset = 18;\nhanging_hole_box_width = 12;\nhanging_hole_box_height = 16;\nhanging_hole_depth = 7;\nhanging_hole_wall_thickness = 1;\n\n/* [Debug] */\n\n// Gap between STL parts for visual debugging\ndebug_gap = 40;\ncross_section_percentage = 0; // [0:100]\n\n// End of variables.\n\n$fn = 32;\n\n/*****************************************************************************/\n/*                Derived Dimensions (overall frame size)                    */\n/*****************************************************************************/\n\n// Physical width of the eInk panel (mm) + clearance 0.3*2\npanel_width_with_clearance  = panel_width  + clearance * 2;\n// Physical height of the eInk panel (mm) + clearance 0.3*2\npanel_height_with_clearance = panel_height + clearance * 2;\n\n// Width and height of the entire frame\nframe_full_width  = panel_width_with_clearance\n                  + panel_border_left + panel_border_right;\n\nframe_full_height = panel_height_with_clearance\n                  + panel_border_top + panel_border_bottom;\n\n// Total depth across all 4 layers\nframe_full_depth = panel_depth\n                 + panel_cover_depth\n                 + case_depth\n                 + back_depth;\n\nkickstand_height = frame_full_height * kickstand_height_percentage / 100;\nkickstand_full_width = kickstand_width + 2 * kickstand_wall_thickness + 2 * kickstand_gap_thickness;\nkickstand_leg_full_width = kickstand_leg_width + 2 * kickstand_wall_thickness + 2 * kickstand_gap_thickness;\nkickstand_leg_bridge_offset = kickstand_leg_bridge_offset_percentage * (kickstand_height - 2 * kickstand_leg_bridge_height) / 100;\n\n/*****************************************************************************/\n/*                 Utility: Corner Screw Hole Positions                      */\n/*****************************************************************************/\n\n// Coordinates for the four corners, offset in from each edge\nscrew_positions = [\n    [ screw_offset_left,                     screw_offset_bottom                  ],\n    [ frame_full_width - screw_offset_right, screw_offset_bottom                  ],\n    [ screw_offset_left,                     frame_full_height - screw_offset_top ],\n    [ frame_full_width - screw_offset_right, frame_full_height - screw_offset_top ],\n\n    for (s = extra_screws_bottom)\n        if (s != 0 && s != 1)\n            [ screw_offset_left + s * (frame_full_width - screw_offset_left - screw_offset_right), \n            frame_full_height - screw_offset_top ],\n\n    for (s = extra_screws_top)\n        if (s != 0 && s != 1)\n            [ screw_offset_left + s * (frame_full_width - screw_offset_left - screw_offset_right), \n            screw_offset_bottom ],\n\n    for (s = extra_screws_left)\n        if (s != 0 && s != 1)\n            [ screw_offset_left, \n            screw_offset_bottom + s * (frame_full_height - screw_offset_bottom - screw_offset_top) ],\n\n    for (s = extra_screws_right)\n        if (s != 0 && s != 1)\n            [ frame_full_width - screw_offset_right, \n            screw_offset_bottom + s * (frame_full_height - screw_offset_bottom - screw_offset_top) ]\n];\n\n\n/*****************************************************************************/\n/*                            Panel cover                                    */\n/*****************************************************************************/\n\nmodule panel_cover() {\n    difference() {\n        // Top block\n        filletBoxTop(frame_full_width, frame_full_height, panel_cover_depth + panel_depth);\n        \n        // Window for the eInk panel’s visible area\n        translate(\n          [\n            panel_bezel_left + panel_border_left, \n            panel_bezel_top  + panel_border_top,\n            -0.11\n          ]\n        )\n        cube([\n            panel_width_with_clearance  - panel_bezel_left - panel_bezel_right, \n            panel_height_with_clearance - panel_bezel_top  - panel_bezel_bottom, \n            panel_cover_depth + 0.22\n        ]);\n\n        for (c = screw_positions) {\n            translate([c[0], c[1],  panel_cover_depth + panel_depth - panel_screw_insert_depth])\n                cylinder(d = panel_screw_insert_diameter, \n                         h = panel_screw_insert_depth + 0.11);\n        }\n\n        // Internal rectangular cutout matching the panel\n        translate(\n          [\n            panel_border_left,\n            panel_border_top,\n            panel_cover_depth\n          ]\n        )\n        cube([\n            panel_width_with_clearance,\n            panel_height_with_clearance,\n            panel_depth + 0.22\n        ]);\n        if (panel_cable_gap_bottom > 0) {\n            render_panel_cable_gap_bottom(panel_depth, panel_cover_depth);\n        }\n        if (panel_cable_gap_top > 0) {\n            render_panel_cable_gap_top(panel_depth, panel_cover_depth);\n        }\n        if (panel_cable_gap_left > 0) {\n            render_panel_cable_gap_left(panel_depth, panel_cover_depth);\n        }\n        if (panel_cable_gap_right > 0) {\n            render_panel_cable_gap_right(panel_depth, panel_cover_depth);\n        }\n    }\n}\n\nmodule render_panel_cable_gap_bottom(depth, translate_depth) {\n    cubeWithAngledTopBottom(\n        loc=[\n            panel_border_left + panel_width_with_clearance / 2 - panel_cable_gap_bottom / 2,\n            panel_border_top + panel_height_with_clearance - case_inner_padding_bottom - case_depth - 0.11,\n            translate_depth\n        ],\n        size=[\n            panel_cable_gap_bottom,\n            panel_cable_gap_size + case_inner_padding_bottom + 0.11 + case_depth,\n            depth + 0.11\n        ]\n    );\n}\n\nmodule render_panel_cable_gap_top(depth, translate_depth) {\n    cubeWithAngledTopBottom(\n        loc=[\n            panel_border_left + panel_width_with_clearance / 2 - panel_cable_gap_top / 2,\n            panel_border_top - panel_cable_gap_size,\n            translate_depth\n        ],\n        size=[\n            panel_cable_gap_top,\n            panel_cable_gap_size * 2 + case_inner_padding_top + 0.11, // 2x to cut into the chamfer\n            depth + 0.11\n        ],\n        top=(view_mode == \"print_vertical\"),\n        topReverse=true\n    );\n}\n\nmodule render_panel_cable_gap_left(depth, translate_depth) {\n    cubeWithAngledTopBottom(\n        loc=[\n            panel_border_left - panel_cable_gap_size,\n            panel_border_top + panel_height_with_clearance / 2 - panel_cable_gap_left / 2,\n            translate_depth\n        ],\n        size=[\n            panel_cable_gap_size + case_inner_padding_left + 0.11,\n            panel_cable_gap_left,\n            depth + 0.11\n        ],\n        top=(view_mode == \"print_vertical\"),\n        topReverse=true\n    );\n}\n\nmodule render_panel_cable_gap_right(depth, translate_depth) {\n    cubeWithAngledTopBottom(\n        loc=[\n            panel_border_left + panel_width_with_clearance - case_inner_padding_right - 0.11,\n            panel_border_top + panel_height_with_clearance / 2 - panel_cable_gap_right / 2,\n            translate_depth\n        ],\n        size=[\n            panel_cable_gap_size + case_inner_padding_right + 0.11,\n            panel_cable_gap_right,\n            depth + 0.11\n        ],\n        top=(view_mode == \"print_vertical\"),\n        topReverse=true\n    );\n}\n\n/*****************************************************************************/\n/*                             Case body                                     */\n/*****************************************************************************/\n\nmodule caseBody () {\n    difference() {\n        filletBoxBottom(\n            frame_full_width, \n            frame_full_height, \n            case_depth + back_depth\n        );\n        \n        // Internal rectangular cutout for electronics\n        translate(\n          [\n            panel_border_left + case_inner_padding_left,\n            panel_border_top  + case_inner_padding_top,\n            -0.11\n          ]\n        )\n        cube([\n            panel_width_with_clearance \n              - case_inner_padding_left \n              - case_inner_padding_right,\n            panel_height_with_clearance \n              - case_inner_padding_top \n              - case_inner_padding_bottom,\n            case_depth + 0.11\n        ]);\n        case_cable_gaps();\n        case_holes();\n    }\n     // chamfer the edges\n    if (view_mode == \"print_vertical\") {\n        difference() {\n            // top chamfer\n            let (\n                l = panel_width_with_clearance - case_inner_padding_left - case_inner_padding_right, \n                w = -case_depth, \n                h = -case_depth\n            )\n            translate([\n                panel_border_left + case_inner_padding_left,\n                panel_border_top  + case_inner_padding_top + case_depth,\n                case_depth\n            ])\n            polyhedron(//pt 0        1        2        3        4        5\n                points=[[0,0,0], [l,0,0], [l,w,0], [0,w,0], [0,w,h], [l,w,h]],\n                faces=[[0,1,2,3],[5,4,3,2],[0,4,5,1],[0,3,4],[5,2,1]]\n            );\n            if (panel_cable_gap_top > 0) {\n                render_panel_cable_gap_top(case_cable_gap_depth, -0.11);\n            }\n        }\n    }\n}\n\nmodule case_cable_gaps() {\n    if (panel_cable_gap_bottom > 0) {\n        render_panel_cable_gap_bottom(case_cable_gap_depth, -0.11);\n    }\n    if (panel_cable_gap_top > 0) {\n        render_panel_cable_gap_top(case_cable_gap_depth, -0.11);\n    }\n    if (panel_cable_gap_left > 0) {\n        render_panel_cable_gap_left(case_cable_gap_depth, -0.11);\n    }\n    if (panel_cable_gap_right > 0) {\n        render_panel_cable_gap_right(case_cable_gap_depth, -0.11);\n    }\n}\n\nmodule case_holes() {\n    if (case_hole_left_top > 0) {\n        translate([-0.11, case_hole_left_top_offset + panel_border_top + case_inner_padding_top - 0.11, -0.11 + case_hole_top_depth])\n        cube([\n            panel_border_left + case_inner_padding_left + 0.22,\n            case_hole_left_top + 0.22,\n            case_depth - case_hole_top_depth - case_hole_bottom_depth + 0.22\n        ]);\n    }\n    if (case_hole_left_bottom > 0) {\n        translate([-0.11, - case_hole_left_bottom_offset + panel_border_top + panel_height_with_clearance - case_inner_padding_bottom - case_hole_left_bottom - 0.11, -0.11 + case_hole_top_depth])\n        cube([\n            panel_border_left + case_inner_padding_left + 0.22,\n            case_hole_left_bottom + 0.22,\n            case_depth - case_hole_top_depth - case_hole_bottom_depth + 0.22\n        ]);\n    }\n    if (case_hole_right_top > 0) {\n        translate([panel_width_with_clearance + panel_border_left - case_inner_padding_right - 0.11, case_hole_right_top_offset + panel_border_top + case_inner_padding_top - 0.11, -0.11 + case_hole_top_depth])\n        cube([\n            panel_border_right + case_inner_padding_right + 0.22,\n            case_hole_right_top + 0.22,\n            case_depth - case_hole_top_depth - case_hole_bottom_depth + 0.22\n        ]);\n    }\n    if (case_hole_right_bottom > 0) {\n        translate([panel_width_with_clearance + panel_border_left - case_inner_padding_right - 0.11, - case_hole_right_bottom_offset + panel_border_top + panel_height_with_clearance - case_inner_padding_bottom - case_hole_right_bottom - 0.11, -0.11 + case_hole_top_depth])\n        cube([\n            panel_border_right + case_inner_padding_right + 0.22,\n            case_hole_right_bottom + 0.22,\n            case_depth - case_hole_top_depth - case_hole_bottom_depth + 0.22\n        ]);\n    }\n    if (case_hole_top_left > 0) {\n        translate([case_hole_top_left_offset + panel_border_left + case_inner_padding_left - 0.11, -0.11, -0.11 + case_hole_top_depth])\n        cube([\n            case_hole_top_left + 0.22,\n            panel_border_top + case_inner_padding_top + 0.22,\n            case_depth - case_hole_top_depth - case_hole_bottom_depth + 0.22\n        ]);\n    }\n    if (case_hole_top_right > 0) {\n        translate([- case_hole_top_right_offset + panel_border_left + panel_width_with_clearance - case_inner_padding_right - case_hole_top_right - 0.11, -0.11, -0.11 + case_hole_top_depth])\n        cube([\n            case_hole_top_right + 0.22,\n            panel_border_top + case_inner_padding_top + 0.22,\n            case_depth - case_hole_top_depth - case_hole_bottom_depth + 0.22\n        ]);\n    }\n    if (case_hole_bottom_left > 0) {\n        translate([case_hole_bottom_left_offset + panel_border_left + case_inner_padding_left - 0.11, panel_border_top + panel_height_with_clearance - case_inner_padding_bottom - 0.11, -0.11 + case_hole_top_depth])\n        cube([\n            case_hole_bottom_left + 0.22,\n            panel_border_top + case_inner_padding_top + 0.22,\n            case_depth - case_hole_top_depth - case_hole_bottom_depth + 0.22\n        ]);\n    }\n    if (case_hole_bottom_right > 0) {\n        translate([-case_hole_bottom_right_offset + panel_border_left + panel_width_with_clearance - case_inner_padding_right - case_hole_bottom_right - 0.11, panel_border_top + panel_height_with_clearance - case_inner_padding_bottom - 0.11, -0.11 + case_hole_top_depth])\n        cube([\n            case_hole_bottom_right + 0.22,\n            panel_border_top + case_inner_padding_top + 0.22,\n            case_depth - case_hole_top_depth - case_hole_bottom_depth + 0.22\n        ]);\n    }   \n}\n\nmodule case() {\n    // Cut out inner cylinders for screws\n    difference() {\n        union() {\n            if (case_center_support_vertical || case_center_support_horizontal) {\n                difference() {\n                    union() {\n                        // Center support\n                        if (case_center_support_horizontal) {\n                            cubeWithAngledTopBottom(\n                                loc=[frame_full_width / 4, frame_full_height / 2 - (case_center_support_width / 2), 0],\n                                size=[frame_full_width / 6, case_center_support_width, case_depth],\n                                bottom=(view_mode == \"print_vertical\")\n                            );\n                            cubeWithAngledTopBottom(\n                                loc=[frame_full_width / 4 + frame_full_width / 3, frame_full_height / 2 - (case_center_support_width / 2), 0],\n                                size=[frame_full_width / 6, case_center_support_width, case_depth],\n                                bottom=(view_mode == \"print_vertical\")\n                            );\n                        }\n\n                        if (case_center_support_vertical) {\n                            cubeWithAngledTopBottom(\n                                loc=[frame_full_width / 2 - (case_center_support_width / 2), frame_full_height / 4, 0],\n                                size=[case_center_support_width, frame_full_height / 6, case_depth],\n                                bottom=(view_mode == \"print_vertical\")\n                            );\n                            cubeWithAngledTopBottom(\n                                loc=[frame_full_width / 2 - (case_center_support_width / 2), frame_full_height / 4 + frame_full_height / 3, 0],\n                                size=[case_center_support_width, frame_full_height / 6, case_depth],\n                                bottom=(view_mode == \"print_vertical\")\n                            );\n                        }\n                    };\n                }\n            };\n\n            if (usb_cutout) {\n                cubeWithAngledTopBottom(\n                    loc=[\n                        frame_full_width * usb_cutout_offset_x_percentage / 100, \n                        frame_full_height * usb_cutout_offset_y_percentage / 100,\n                        back_depth + case_depth - (usb_cutout_box_depth + usb_cutout_box_wall_thickness),\n                    ], \n                    size =[\n                        usb_cutout_box_width + usb_cutout_box_wall_thickness * 2, \n                        usb_cutout_box_height + usb_cutout_box_wall_thickness, \n                        usb_cutout_box_depth + usb_cutout_box_wall_thickness\n                    ], \n                    bottom=(usb_cutout_hole_postition != \"bottom\")\n                );\n            }\n            if (hanging_hole) {\n                cubeWithAngledTopBottom(\n                    loc=[\n                        (frame_full_width - hanging_hole_box_width - hanging_hole_wall_thickness * 2) / 2, \n                        hanging_hole_offset - hanging_hole_wall_thickness, \n                        back_depth + case_depth - min(back_depth + case_depth, hanging_hole_depth)\n                    ],\n                    size=[\n                        hanging_hole_box_width + 2 * hanging_hole_wall_thickness, \n                        hanging_hole_box_height + 2 * hanging_hole_wall_thickness, \n                        min(back_depth + case_depth, hanging_hole_depth)\n                    ],\n                    bottom=(view_mode == \"print_vertical\")\n                );\n            }\n\n            // Cut out a piece of the cube\n            caseBody();\n        };\n        \n        // Cut holes to the back\n        for (c = screw_positions) {\n            // Screw thread hole that goes all the way\n            translate([c[0], c[1], - 0.11])\n            cylinder(d = case_screw_hole_thread_diameter,\n                      h = case_depth + back_depth + 0.11);\n            \n            // Cylinder hole from back to insert\n            translate([c[0], c[1], case_screw_hole_insert_depth + case_screw_hole_floor_depth]) // Solid border around the screw hole\n            cylinder(d = case_screw_hole_diameter,\n                      h = case_depth + back_depth - case_screw_hole_insert_depth - case_screw_hole_floor_depth + 0.11); // Hole for the screw thread\n            \n            // Cylinder hole from front to insert\n            translate([c[0], c[1], - 0.11]) // Solid border around the screw hole\n            cylinder(d = case_screw_hole_diameter,\n                      h = case_screw_hole_insert_depth + 0.11); // Hole for the screw thread\n        }\n\n        if (usb_cutout) {\n            // Cutout into box\n            cubeWithAngledTopBottom(\n                loc=[\n                    frame_full_width * usb_cutout_offset_x_percentage / 100 + usb_cutout_box_wall_thickness, \n                    frame_full_height * usb_cutout_offset_y_percentage / 100 + usb_cutout_box_wall_thickness,\n                    back_depth + case_depth - usb_cutout_box_depth,\n                ], \n                size =[\n                    usb_cutout_box_width, \n                    usb_cutout_box_height, \n                    usb_cutout_box_depth + 0.11\n                ], \n                bottom=(usb_cutout_hole_postition != \"bottom\")\n            );\n\n            // Hole into what's remaining\n            if (usb_cutout_hole_postition == \"left\" || usb_cutout_hole_postition == \"right\") {\n                translate([\n                    frame_full_width * usb_cutout_offset_x_percentage / 100 + usb_cutout_box_wall_thickness - usb_cutout_box_wall_thickness - 0.11\n                    + (usb_cutout_hole_postition == \"right\" ? usb_cutout_box_width + usb_cutout_box_wall_thickness : 0), \n                    frame_full_height * usb_cutout_offset_y_percentage / 100 + usb_cutout_box_wall_thickness + (usb_cutout_box_height - usb_cutout_hole_width) / 2,\n                    back_depth + case_depth - usb_cutout_box_depth + (usb_cutout_box_depth - usb_cutout_hole_height) / 2,\n                ])\n                cube([\n                    usb_cutout_box_wall_thickness + 0.22, \n                    usb_cutout_hole_width, \n                    usb_cutout_hole_height\n                ]);\n            } else {\n                translate([\n                    frame_full_width * usb_cutout_offset_x_percentage / 100 + usb_cutout_box_wall_thickness + (usb_cutout_box_width - usb_cutout_hole_width) / 2, \n                    frame_full_height * usb_cutout_offset_y_percentage / 100 + usb_cutout_box_wall_thickness - usb_cutout_box_wall_thickness - 0.11 \n                    + (usb_cutout_hole_postition == \"bottom\" ? usb_cutout_box_height + usb_cutout_box_wall_thickness : 0),\n                    back_depth + case_depth - usb_cutout_box_depth + (usb_cutout_box_depth - usb_cutout_hole_height) / 2,\n                ])\n                cube([\n                    usb_cutout_hole_width, \n                    usb_cutout_box_wall_thickness + 0.22, \n                    usb_cutout_hole_height\n                ]);\n            }\n        }\n\n        if (hanging_hole) {\n            cubeWithAngledTopBottom(\n                loc=[\n                    (frame_full_width - hanging_hole_box_width) / 2, \n                    hanging_hole_offset, \n                    back_depth + case_depth - min(back_depth + case_depth, hanging_hole_depth) + hanging_hole_wall_thickness\n                ],\n                size=[\n                    hanging_hole_box_width, \n                    hanging_hole_box_height, \n                    min(back_depth + case_depth, hanging_hole_depth) - hanging_hole_wall_thickness * 2\n                ],\n                bottom=(view_mode == \"print_vertical\")\n            );\n\n            // Big cyclinter hole\n            translate([\n                frame_full_width / 2, \n                hanging_hole_offset + hanging_hole_box_height * 0.75, \n                case_depth - 0.11\n            ])\n            rotate([0, 0, 90])\n            cylinder(d = hanging_hole_large_diameter, h = back_depth + 0.21);\n            // Small cyclinter hole\n            translate([\n                frame_full_width / 2, \n                hanging_hole_offset + hanging_hole_box_height * 0.75 - hanging_hole_large_diameter, \n                case_depth - 0.11\n            ])\n            rotate([0, 0, 90])\n            cylinder(d = hanging_hole_small_diameter, h = back_depth + 0.21);\n            // Box connecitng the two\n            translate([\n                frame_full_width / 2 - hanging_hole_small_diameter / 2,\n                hanging_hole_offset + hanging_hole_box_height * 0.75 - hanging_hole_large_diameter, \n                case_depth - 0.11\n            ])\n            cube([hanging_hole_small_diameter, hanging_hole_large_diameter, back_depth + 0.21]);\n        }\n    }\n}\n\n/*****************************************************************************/\n/*                             Kickstand                                     */\n/*****************************************************************************/\n\nmodule caseWithKickstand() {\n    hinge_real_depth = kickstand_depth - kickstand_wall_thickness - kickstand_hinge_wall_padding - kickstand_hinge_diameter / 2;\n    hinge_top_offset = kickstand_wall_thickness + kickstand_depth / 2 + kickstand_hinge_top_extra_leverage;\n    hinge_start = [\n        frame_full_width / 2 - kickstand_full_width / 2 + 0.11, \n        frame_full_height - kickstand_bottom_start - kickstand_height + hinge_top_offset,\n        case_depth + back_depth - hinge_real_depth / 2\n    ];\n    leg_x_starts_full = [\n        (frame_full_width - kickstand_full_width) / 2,\n        (frame_full_width + kickstand_full_width) / 2 - kickstand_leg_full_width,\n    ];\n    leg_x_starts_hole = [\n        leg_x_starts_full[0] + kickstand_wall_thickness,\n        leg_x_starts_full[1] + kickstand_wall_thickness,\n    ];\n    leg_x_starts_leg = [\n        leg_x_starts_hole[0] + kickstand_gap_thickness,\n        leg_x_starts_hole[1] + kickstand_gap_thickness,\n    ];\n    leg_depth = kickstand_depth - kickstand_gap_thickness - kickstand_wall_thickness;\n    leg_bridge_depth = leg_depth * 0.8;\n    leg_yz = [\n        frame_full_height - kickstand_bottom_start - kickstand_height + kickstand_gap_thickness + kickstand_wall_thickness,\n        case_depth + back_depth - leg_depth\n    ];\n\n    leg_bridge_leg_y = frame_full_height - kickstand_bottom_start - kickstand_leg_bridge_offset - kickstand_leg_bridge_height * 2;\n    leg_bridge_hole_y = leg_bridge_leg_y - kickstand_gap_thickness;\n    leg_bridge_full_y = leg_bridge_leg_y - kickstand_wall_thickness;\n    leg_top_height_full = kickstand_depth + kickstand_hinge_top_extra_leverage + kickstand_wall_thickness * 2 + kickstand_gap_thickness;\n\n    // Make a hole in the case\n    difference() {\n        union() {\n            case();\n            // Protective box around the kickstand legs\n            for (x = leg_x_starts_full) {\n                // Long base leg\n                cubeWithAngledTopBottom(\n                    loc=[\n                        x, \n                        frame_full_height - kickstand_bottom_start - kickstand_height, \n                        case_depth + back_depth - kickstand_depth - kickstand_gap_thickness\n                    ],\n                    size=[kickstand_leg_full_width, kickstand_height, kickstand_depth + kickstand_gap_thickness],\n                    bottom=(view_mode == \"print_vertical\" && kickstand_bottom_start >= kickstand_depth),\n                    top=true\n                );\n            }\n    \n            // Protective box around the leg bridge\n            cubeWithAngledTopBottom(\n                loc=[\n                    leg_x_starts_full[0] + kickstand_leg_full_width - kickstand_wall_thickness * 2, \n                    leg_bridge_full_y + kickstand_depth - kickstand_wall_thickness, \n                    case_depth + back_depth - kickstand_depth\n                ],\n                size=[\n                    kickstand_full_width - kickstand_leg_full_width * 2 + kickstand_wall_thickness * 4, \n                    kickstand_leg_bridge_height * 2 + kickstand_wall_thickness * 2 - kickstand_depth * 2, \n                    kickstand_depth\n                ],\n                top=true,\n                bottom=true\n            );\n        }\n        // Now the holes\n        for (x = leg_x_starts_hole) {\n            // Top thicker part - top extra cavity\n            cubeWithAngledTopBottom(\n                loc=[\n                    x,\n                    frame_full_height - kickstand_bottom_start - kickstand_height,\n                    case_depth + back_depth - kickstand_depth + kickstand_gap_thickness\n                ],\n                size=[\n                    kickstand_leg_width + 2 * kickstand_gap_thickness,\n                    kickstand_wall_thickness + 0.11,\n                    kickstand_depth - kickstand_wall_thickness * 2\n                ],\n                top=true\n            );\n            // Long base leg\n            cubeWithAngledTopBottom(\n                loc=[\n                    x,\n                    frame_full_height - kickstand_bottom_start - kickstand_height + kickstand_wall_thickness,\n                    case_depth + back_depth - kickstand_depth - kickstand_gap_thickness + kickstand_wall_thickness\n                ],\n                size=[\n                    kickstand_leg_width + 2 * kickstand_gap_thickness,\n                    kickstand_height - 2 * kickstand_wall_thickness,\n                    kickstand_depth - kickstand_wall_thickness + kickstand_gap_thickness + 0.11\n                ]\n            );\n        }\n\n        // Leg bridge hole\n        cubeWithAngledTopBottom(\n            loc=[\n                leg_x_starts_full[0] + kickstand_leg_full_width - kickstand_wall_thickness - 0.11, \n                leg_bridge_full_y + kickstand_depth, \n                case_depth + back_depth - kickstand_depth + kickstand_gap_thickness \n            ],\n            size=[\n                kickstand_full_width - kickstand_leg_full_width * 2 + kickstand_wall_thickness * 2 + 0.22, \n                kickstand_leg_bridge_height * 2 - kickstand_depth * 2 + kickstand_gap_thickness, \n                kickstand_depth - kickstand_gap_thickness + 0.11\n            ],\n            top=true,\n            bottom=true\n        );\n    }\n    \n    // The kickstand itself\n    difference() {\n        union() {\n            // Legs\n            for (x = leg_x_starts_leg) {\n                // Render the leg's top cylinder over the hinge\n                translate([x, hinge_start[1], hinge_start[2]])\n                rotate([90, 0, 90])\n                cylinder(d = hinge_real_depth, h = kickstand_leg_width);\n\n                // Render the large leg top\n                translate([x, hinge_start[1], hinge_start[2]])\n                rotate([kickstand_rotation, 0, 0])\n                translate([0, leg_yz[0] - hinge_start[1], case_depth + back_depth - (hinge_real_depth / 2) - hinge_start[2]])\n                cube([\n                    kickstand_leg_width, \n                    hinge_top_offset,\n                    hinge_real_depth / 2\n                ]);\n\n                // Render the large leg\n                translate([x, hinge_start[1], hinge_start[2]])\n                rotate([kickstand_rotation, 0, 0])\n                translate([0, leg_yz[0] - hinge_start[1] + hinge_top_offset - kickstand_hinge_diameter, leg_yz[1] - hinge_start[2]])\n                cube([\n                    kickstand_leg_width, \n                    kickstand_height - kickstand_gap_thickness - kickstand_wall_thickness * 2 - kickstand_gap_thickness - hinge_top_offset + kickstand_hinge_diameter,\n                    leg_depth\n                ]);\n            }\n            // Render the leg bridge\n            translate([0, hinge_start[1], hinge_start[2]])\n            rotate([kickstand_rotation, 0, 0])\n            cubeWithAngledTopBottom(\n                loc=[\n                    leg_x_starts_leg[0] + kickstand_leg_width, \n                    leg_bridge_leg_y - hinge_start[1] + leg_bridge_depth,\n                    case_depth + back_depth - leg_bridge_depth - hinge_start[2]\n                ],\n                size=[\n                    kickstand_width - 2 * kickstand_leg_width, \n                    max(kickstand_leg_bridge_height - hinge_real_depth - leg_bridge_depth, 0), \n                    leg_bridge_depth\n                ],\n                top=true,\n                bottom=true\n            );\n        }\n\n        // Render an empty cylinder inside the top cylinder, where the hinge will go through\n        translate([leg_x_starts_leg[0] - 0.11, hinge_start[1], hinge_start[2]])\n        rotate([90, 0, 90])\n        cylinder(d = kickstand_hinge_diameter + kickstand_hinge_cylinder_gap * 2, h = kickstand_width + 0.22);\n\n        // Render an empty cylinder into the feet of the kickstand\n        for (x = leg_x_starts_leg) {\n            translate([0, hinge_start[1], hinge_start[2]])\n            rotate([kickstand_rotation, 0, 0])\n            translate([\n                x - 0.11, \n                frame_full_height - kickstand_bottom_start - kickstand_gap_thickness * 3 - hinge_start[1],\n                case_depth + back_depth - hinge_start[2] - leg_depth / 2\n            ])\n            rotate([90, 0, 90])\n            cylinder(d = leg_depth  * 0.75, h = kickstand_leg_width + 0.22);\n        }\n    }\n\n    // Do not print this for vertical prints, as the legs will get stuck into it\n    if (view_mode != \"print_vertical\") {\n        // Render an full cylinder into the frame to snap the legs into\n        for (x = leg_x_starts_hole) {\n            translate([\n                x - 0.11, \n                frame_full_height - kickstand_bottom_start - kickstand_gap_thickness * 2,\n                case_depth + back_depth - hinge_real_depth / 4\n            ])\n            rotate([90, 0, 90])\n            cylinder(d = hinge_real_depth / 3, h = kickstand_leg_width + 0.22 + kickstand_gap_thickness * 2);\n        }\n    }\n    \n    // Render a cylinder as a hinge\n    for (x = leg_x_starts_full) {\n        translate([x, hinge_start[1], hinge_start[2]])\n        rotate([90, 0, 90])\n        cylinder(d = kickstand_hinge_diameter, h = kickstand_leg_full_width - 0.22);\n    }\n}\n\n/*****************************************************************************/\n/*                              Utility                                      */\n/*****************************************************************************/\n\n\nmodule filletBox(x, y, z, r = fillet_radius) {\n    // Optional sanity check (warn if the fillet is too large):\n    if (x < 2*r || y < 2*r || z < 2*r) {\n        echo(\"WARNING: fillet radius is too large for box dimensions!\");\n    }\n    \n    // Minkowski sum of a smaller cube + sphere(r)\n    // => yields a final shape with filleted edges/corners.\n    translate([r, r, r])  // Move the sphere to the corner of the cube\n    minkowski() {\n        // Create the “inner” cube, shrunk by 2*r in each dimension\n        // so that after Minkowski we end up with full x, y, z overall.\n        cube([x - 2*r, y - 2*r, z - 2*r], center = false);\n\n        // Add the sphere that “rounds” the corners/edges\n        sphere(r = r, $fn = 64);  // $fn=64 for smoother arcs\n    }\n}\n\nmodule filletBoxTop(x, y, z, r = fillet_radius) {\n    intersection() {\n        cube([x, y, z]);\n        filletBox(x, y, z * 2, r);\n    }\n}\n\nmodule filletBoxMiddle(x, y, z, r = fillet_radius) {\n    intersection() {\n        cube([x, y, z]);\n        translate([0, 0, -z])\n        filletBox(x, y, z * 3, r);\n    }\n}\n\nmodule filletBoxBottom(x, y, z, r = fillet_radius) {\n    intersection() {\n        cube([x, y, z]);\n        translate([0, 0, -z])\n        filletBox(x, y, z * 2, r);\n    }\n}\n\nmodule cubeWithAngledTopBottom(loc, size, top=false, topReverse=false, bottom=false, bottomReverse=false) {\n    translate(loc)\n    cube(size);\n\n    if (top) {\n        translate([loc[0], loc[1] - (topReverse ? size[2] : 0) + 0.01, loc[2]])\n        rotate(topReverse ? [0,0,0] : [90,0,0])\n        polyhedron(//pt 0        1        2        3        4        5\n            points=[[0,0,0], [size[0],0,0], [size[0],size[2],0], [0,size[2],0], [0,size[2],size[2]], [size[0],size[2],size[2]]],\n            faces=[[0,1,2,3],[5,4,3,2],[0,4,5,1],[0,3,4],[5,2,1]]\n        );\n    }\n    if (bottom) {\n        translate([loc[0], loc[1] + size[1] + (bottomReverse ? 0 : size[2]) - 0.01, loc[2] + size[2]])\n        rotate(bottomReverse ? [270,0,0] : [180,0,0])\n        polyhedron(//pt 0        1        2        3        4        5\n            points=[[0,0,0], [size[0],0,0], [size[0],size[2],0], [0,size[2],0], [0,size[2],size[2]], [size[0],size[2],size[2]]],\n            faces=[[0,1,2,3],[5,4,3,2],[0,4,5,1],[0,3,4],[5,2,1]]\n        );\n    }\n}\n\n\n/*****************************************************************************/\n/*                              Rendering                                    */\n/*****************************************************************************/\n\nprint_gap = 20;\n\ndifference() {\n    union() {\n        rotate(\n            view_mode == \"print_vertical\" \n            ? [180, 180, 180]\n            : view_mode == \"print_horizontal\" \n            ? [0, 0, 180]\n            : [0, 180, 0])\n        translate(\n            view_mode == \"print_vertical\" \n            ? [-frame_full_width/2, -frame_full_height - print_gap, 0]\n            : view_mode == \"print_horizontal\" \n                ? [-frame_full_width/2, +frame_full_height/2 + print_gap, -(case_depth + back_depth)] \n                : [-frame_full_width/2, -frame_full_height/2, - (panel_cover_depth + panel_depth + debug_gap)])  // stacked\n        panel_cover();\n\n        rotate(\n            view_mode == \"print_vertical\" \n            ? [90, 180, 180] \n            : [0, 180, 0]\n        )\n        translate(\n            view_mode == \"print_vertical\" \n            ? [-frame_full_width/2, -frame_full_height * vertical_print_scale, 0] \n            : [-frame_full_width/2, -frame_full_height/2, 0]\n        )\n        scale([1, view_mode == \"print_vertical\" ? vertical_print_scale : 1, 1])\n        if (kickstand) {\n            caseWithKickstand();\n        } else {\n            case();\n        };\n        // translate([-frame_full_width / 2, -400, -100])\n        // cube([frame_full_width * cross_section_percentage / 100 + 0.2, frame_full_height + 500, 500]);\n    }\n\n    // cut off half\n    if (cross_section_percentage > 0 && cross_section_percentage < 100) {\n        translate([-frame_full_width / 2 - 0.11, -400, -100])\n        cube([frame_full_width * cross_section_percentage / 100 + 0.2, frame_full_height + 500, 500]);\n    }\n}\n\n",
  "hello.scad": "// Welcome to The FrameOS Case Maker!\n\n// 1. Choose your panel (e.g. waveshare.7in3e) from the dropdown above.\n// 2. Set values like \"case_depth\" to customize your case.\n// 3. Generate a STL by clicking \"render\" below.\n\n// To share your customizations with everyone else, visit:\n// - https://github.com/FrameOS/cases/\n// - https://frameos.net/\n\n// If you're new to OpenSCAD, get started here:\n// - https://openscad.org/documentation.html\n// - https://openscad.org/cheatsheet/index.html\n// - https://learnxinyminutes.com/openscad/\n\n// This is a fork of the OpenSCAD playground. Big props to them!\n// - https://github.com/openscad/openscad-playground\n\n/* [Demo] */\n\n// This is just a quick demo with a few configuration options.\n// Open \"waveshare.13in3e.scad\" for more settings,\n// ... or peek into \"case1.scad\" for all of them.\n\ninclude <waveshare.13in3e.scad>\n\nview_mode=\"print_vertical\"; // [print_vertical, print_horizontal, stacked]\n\n// Physical width of the eInk panel (mm)\npanel_width  = 284.49;\n// Physical height of the eInk panel (mm)\npanel_height = 208.81;\n// Total inside compartment thickness. Measure and adjust!\ncase_depth = 10.0; \n// Add a kickstand\nkickstand = true;\n// Kickstand rotation (for debugging)\nkickstand_rotation = 0; // [0:35]\n// Add a cutout for the USB port\nusb_cutout = false;\n// Hanging hole\nhanging_hole = true;\n// Vertical spacers holding up the frame\ncase_center_support_vertical = true;\n// Horizontal spacers holding up the frame\ncase_center_support_horizontal = true;\n// Peek into the case (for debugging)\ncross_section_percentage = 0; // [0:100]\n",
  "waveshare.10in3.scad": "// Minimal overrides for Waveshare 10.3\" ePaper case\ninclude <case1.scad>;\n\n/* [View settings] */\nview_mode=\"print_vertical\"; // [print_vertical, print_horizontal, stacked]\n\n/* [Panel dimensions] */\npanel_width  = 216.70;\npanel_height = 174.41;\n\npanel_bezel_left   = 3.1;\npanel_bezel_right  = 3.1;\npanel_bezel_top    = 3.1;\npanel_bezel_bottom = 13.7;\n\n/* [Border and inner padding] */\npanel_border_left   = 6;\npanel_border_right  = 6;\npanel_border_top    = 6;\npanel_border_bottom = 6;\n\ncase_inner_padding_bottom = 6;\n\n/* [Cable gap] */\npanel_cable_gap_bottom = 141;\n\n/* [Case depth] */\ncase_depth = 10.0;\n\n/* [Screws] */\nscrew_offset_left   = 3.2;\nscrew_offset_right  = 3.2;\nscrew_offset_top    = 3.2;\nscrew_offset_bottom = 3.2;\n\nextra_screws_top    = [0.5, 0, 0, 0, 0];\nextra_screws_bottom = [0.165, 0.835, 0, 0, 0];\nextra_screws_left   = [0.5, 0, 0, 0, 0];\nextra_screws_right  = [0.5, 0, 0, 0, 0];\n\n/* [Center support] */\ncase_center_support_vertical   = true;\ncase_center_support_horizontal = true;\n\n/* [Kickstand] */\nkickstand = true;\nkickstand_hinge_top_extra_leverage = 5;\n\n/* [USB cutout] */\nusb_cutout = true;\nusb_cutout_offset_x_percentage = 12;\nusb_cutout_offset_y_percentage = 30;\nusb_cutout_box_depth           = 7;\n\n/* [Hanging hole] */\nhanging_hole = true;\nhanging_hole_offset = 70;\n\n/* [Debug] */\ncross_section_percentage = 0; // [0:100]\nvertical_print_scale = 1.004; // 0.4mm shrinkage for every 100mm\nkickstand_rotation = 0;\n",
  "waveshare.13in3e.scad": "// Minimal overrides for Waveshare 13.3\"E ePaper case\ninclude <case1.scad>;\n\n/* [View settings] */\nview_mode=\"print_vertical\"; // [print_vertical, print_horizontal, stacked]\n\n/* [Panel dimensions] */\npanel_width  = 284.49;\npanel_height = 208.81;\n\npanel_bezel_left   = 11.7;\npanel_bezel_right  = 3.3;\npanel_bezel_top    = 3.1;\npanel_bezel_bottom = 3.1;\n\n/* [Border and inner padding] */\npanel_border_left   = 6.2;\npanel_border_right  = 14.6;\npanel_border_top    = 14.8;\npanel_border_bottom = 14.8;\n\ncase_inner_padding_left = 6;\n\n/* [Cable gap] */\npanel_cable_gap_left = 142;\n\n/* [Case depth] */\ncase_depth = 6.0;\n\n/* [Screws] */\nscrew_offset_left   = 3.2;\nscrew_offset_right  = 3.2;\nscrew_offset_top    = 3.2;\nscrew_offset_bottom = 3.2;\n\nextra_screws_top    = [0.48, 0.52, 0, 0, 0];\nextra_screws_bottom = [0.48, 0.52, 0, 0, 0];\nextra_screws_left   = [0.17, 0.83, 0, 0, 0];\nextra_screws_right  = [0.333, 0.667, 0, 0, 0];\n\n/* [Center support] */\ncase_center_support_vertical   = true;\ncase_center_support_horizontal = true;\n\n/* [Kickstand] */\nkickstand = true;\nkickstand_leg_bridge_offset_percentage = 10;\nkickstand_hinge_top_extra_leverage     = 5;\n\n/* [USB cutout] */\nusb_cutout = true;\nusb_cutout_offset_x_percentage = 25;\nusb_cutout_box_height          = 55;\nusb_cutout_box_depth           = 6.5;\n\n/* [Hanging hole] */\nhanging_hole = true;\nhanging_hole_offset = 70;\n\n/* [Debug] */\ncross_section_percentage = 0; // [0:100]\nvertical_print_scale = 1.004; // 0.4mm shrinkage for every 100mm\nkickstand_rotation = 0;\n",
  "waveshare.7in3e.scad": "// Minimal overrides for Waveshare 7.3\" E case\ninclude <case1.scad>;\n\n/* [View Settings] */\nview_mode=\"print_vertical\"; // [print_vertical, print_horizontal, stacked]\n\n/* [Panel dimensions] */\npanel_width  = 170.3;\npanel_height = 111.3;\n\npanel_bezel_left   = 5.2;\npanel_bezel_right  = 5.2;\npanel_bezel_top    = 4.9;\npanel_bezel_bottom = 10.8;\n\n/* [Border and inner padding] */\npanel_border_left   = 2.0;\npanel_border_right  = 2.0;\npanel_border_top    = 6.0;\npanel_border_bottom = 6.0;\n\ncase_inner_padding_left   = 2.0;\ncase_inner_padding_right  = 2.0;\ncase_inner_padding_top    = 2.0;\ncase_inner_padding_bottom = 2.0;\n\n/* [Cable gap] */\npanel_cable_gap_bottom = 40;\n\n/* [Case depth] */\ncase_depth = 6.0;\n\n/* [Screws] */\nscrew_offset_left   = 4.2;\nscrew_offset_right  = 4.2;\nscrew_offset_top    = 3.2;\nscrew_offset_bottom = 3.2;\n\nextra_screws_top    = [0, 0, 0, 0, 0];\nextra_screws_bottom = [0, 0, 0, 0, 0];\nextra_screws_left   = [0, 0, 0, 0, 0];\nextra_screws_right  = [0, 0, 0, 0, 0];\n\n/* [Center support] */\ncase_center_support_vertical   = false;\ncase_center_support_horizontal = false;\n\n/* [Kickstand] */\nkickstand = true;\nkickstand_leg_bridge_height             = 8;\nkickstand_leg_bridge_offset_percentage  = 0;\nkickstand_depth                         = 6.7;\n\n/* [USB cutout] */\nusb_cutout = true;\nusb_cutout_offset_y_percentage = 28;\nusb_cutout_box_depth           = 6.4;\nusb_cutout_hole_height         = 5.8;\n\n/* [Hanging hole] */\nhanging_hole = true;\nhanging_hole_offset = 4;\n\n/* [Debug] */\ncross_section_percentage = 0; // [0:100]\nvertical_print_scale = 1.004; // 0.4mm shrinkage for every 100mm\nkickstand_rotation = 0;\n",
  "waveshare.7in5.scad": "// Minimal overrides for Waveshare 7.5\" ePaper case\ninclude <case1.scad>;\n\n/* [View settings] */\nview_mode=\"print_vertical\"; // [print_vertical, print_horizontal, stacked]\n\n/* [Panel dimensions] */\npanel_width  = 170.3;\npanel_height = 111.3;\n\npanel_bezel_left   = 3.2;\npanel_bezel_right  = 3.2;\npanel_bezel_top    = 3.0;\npanel_bezel_bottom = 8.9;\n\n/* [Border and inner padding] */\npanel_border_left   = 2.0;\npanel_border_right  = 2.0;\npanel_border_top    = 6.0;\npanel_border_bottom = 6.0;\n\ncase_inner_padding_left   = 2.0;\ncase_inner_padding_right  = 2.0;\ncase_inner_padding_top    = 2.0;\ncase_inner_padding_bottom = 2.0;\n\n/* [Cable gap] */\npanel_cable_gap_bottom = 40;\n\n/* [Case depth] */\ncase_depth = 6.0;\n\n/* [Screws] */\nscrew_offset_left   = 4.2;\nscrew_offset_right  = 4.2;\nscrew_offset_top    = 3.2;\nscrew_offset_bottom = 3.2;\n\nextra_screws_top    = [0, 0, 0, 0, 0];\nextra_screws_bottom = [0, 0, 0, 0, 0];\nextra_screws_left   = [0, 0, 0, 0, 0];\nextra_screws_right  = [0, 0, 0, 0, 0];\n\n/* [Center support] */\ncase_center_support_vertical   = false;\ncase_center_support_horizontal = false;\n\n/* [Kickstand] */\nkickstand = true;\nkickstand_leg_bridge_height             = 8;\nkickstand_leg_bridge_offset_percentage  = 0;\nkickstand_depth                         = 6.7;\n\n/* [USB cutout] */\nusb_cutout = true;\nusb_cutout_offset_y_percentage = 28;\nusb_cutout_box_depth           = 6.4;\nusb_cutout_hole_height         = 5.8;\n\n/* [Hanging hole] */\nhanging_hole = true;\nhanging_hole_offset = 4;\n\n/* [Debug] */\ncross_section_percentage = 0; // [0:100]\nvertical_print_scale = 1.004; // 0.4mm shrinkage for every 100mm\nkickstand_rotation = 0;\n"
}